# fake_news_webapp.py

# === BACKEND (Flask + Fake News Detection Model) ===

from flask import Flask, request, jsonify, render_template
import joblib
import pandas as pd
import re
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns
import os

app = Flask(__name__)

# === Load and prepare dataset ===
data = pd.read_csv("data/fake_news.csv")
data = data.dropna()

# Preprocess text
def clean_text(text):
    text = re.sub(r"[^a-zA-Z]", " ", text)
    text = text.lower()
    return text

data['text'] = data['text'].apply(clean_text)

# Split dataset
X = data['text']
y = data['label']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Vectorize text
vectorizer = TfidfVectorizer(stop_words='english', max_df=0.7)
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

# Train model
model = LogisticRegression()
model.fit(X_train_vec, y_train)

# Save model and vectorizer
joblib.dump(model, "model/fake_news_model.pkl")
joblib.dump(vectorizer, "model/vectorizer.pkl")

# Load model and vectorizer for prediction
model = joblib.load("model/fake_news_model.pkl")
vectorizer = joblib.load("model/vectorizer.pkl")

@app.route("/")
def home():
    return render_template("index.html")

@app.route("/predict", methods=["POST"])
def predict():
    input_text = request.form["news"]
    cleaned = clean_text(input_text)
    vectorized = vectorizer.transform([cleaned])
    prediction = model.predict(vectorized)[0]
    return render_template("index.html", prediction=prediction)

@app.route("/analysis")
def analysis():
    # Analysis: Count plot
    plt.figure(figsize=(6,4))
    sns.countplot(data=data, x="label")
    plt.title("Fake vs Real News Count")
    os.makedirs("static", exist_ok=True)
    plt.savefig("static/analysis.png")
    return render_template("analysis.html")

if __name__ == "__main__":
    app.run(debug=True)
